{"meta":{"title":"Hugo's blog","subtitle":"记录一些问题分享","description":"","author":"Hugo","url":"https://hugobbtt.github.io","root":"/"},"pages":[{"title":"categories","date":"2020-08-20T06:56:45.000Z","updated":"2020-08-20T06:59:21.124Z","comments":true,"path":"categories/index.html","permalink":"https://hugobbtt.github.io/categories/index.html","excerpt":"","text":""},{"title":"about","date":"2020-08-20T06:58:22.000Z","updated":"2020-08-20T17:50:13.211Z","comments":true,"path":"about/index.html","permalink":"https://hugobbtt.github.io/about/index.html","excerpt":"","text":"民工小黄 坐标深圳 编程时间不长，每天进步一点点"}],"posts":[{"title":"尾部开始的链表分组翻转","slug":"尾部开始的链表分组翻转","date":"2020-10-20T03:01:06.000Z","updated":"2020-10-20T03:04:07.532Z","comments":true,"path":"2020/10/20/尾部开始的链表分组翻转/","link":"","permalink":"https://hugobbtt.github.io/2020/10/20/%E5%B0%BE%E9%83%A8%E5%BC%80%E5%A7%8B%E7%9A%84%E9%93%BE%E8%A1%A8%E5%88%86%E7%BB%84%E7%BF%BB%E8%BD%AC/","excerpt":"","text":"尾部开始的链表分组翻转这道题目来自于字节跳动的面试题。 题目描述要求从后往前以k个为一组进行翻转。 例子，1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;6-&gt;7-&gt;8, k = 3, 从后往前以k=3为一组， 6-&gt;7-&gt;8 为一组翻转为8-&gt;7-&gt;6. 3-&gt;4-&gt;5为一组翻转为5-&gt;4-&gt;3. 1-&gt;2只有2个nodes少于k=3个，不翻转。 最后返回：1-&gt;2-&gt;5-&gt;4-&gt;3-&gt;8-&gt;7-&gt;6 思路 这里的思路跟从前往后以k个为一组进行翻转类似，可以进行预处理： 翻转链表 对翻转后的链表进行从前往后以k为一组翻转。 翻转步骤2中得到的链表。 例子：1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;6-&gt;7-&gt;8, k = 3 翻转链表得到：8-&gt;7-&gt;6-&gt;5-&gt;4-&gt;3-&gt;2-&gt;1 以k为一组翻转：6-&gt;7-&gt;8-&gt;3-&gt;4-&gt;5-&gt;2-&gt;1 翻转步骤#2链表：1-&gt;2-&gt;5-&gt;4-&gt;3-&gt;8-&gt;7-&gt;6 python实现 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162class ListNode: def __init__(self, x): self.val = x self.next = Noneclass Solution: def enhancedReverseKGroup(self, head, k): reversedList = self.reverseList(head) reversedKGroup = self.reverseKGroup(reversedList, k) return self.reverseList(reversedKGroup) def reverseList(self, head): prev = None curr = head while curr: tmp = curr.next curr.next = prev prev = curr curr = tmp return prev def reverseKGroup(self, head, k): dummy = jump = ListNode(None) dummy.next = l = r = head while True: count = 0 while r and count &lt; k: r = r.next count += 1 if count == k: # 将每组翻转 prev = r curr = l for _ in range(k): tmp = curr.next curr.next = prev prev = curr curr = tmp # 第一次会把dummy.next 也赋给prev jump.next = prev jump = l l = r else: return dummy.nextif __name__ == &quot;__main__&quot;: a = ListNode(1) a.next = ListNode(2) a.next.next = ListNode(3) a.next.next.next = ListNode(4) a.next.next.next.next = ListNode(5) ans = Solution().enhancedReverseKGroup(a, 3) cache = [] while ans: cache.append(ans.val) ans = ans.next # 打印结果是[1, 2, 5, 4, 3] print(cache) Reference: 一文搞懂《链表反转》 https://cloud.tencent.com/developer/article/1513176LeetCode 25. Reverse Nodes in k-Group https://leetcode.com/problems/reverse-nodes-in-k-group/LeetCode 206. Reverse Linked List https://leetcode.com/problems/reverse-linked-list/","categories":[{"name":"面试","slug":"面试","permalink":"https://hugobbtt.github.io/categories/%E9%9D%A2%E8%AF%95/"}],"tags":[]},{"title":"进程与线程","slug":"进程与线程","date":"2020-08-20T17:58:47.000Z","updated":"2020-10-20T03:10:00.828Z","comments":true,"path":"2020/08/21/进程与线程/","link":"","permalink":"https://hugobbtt.github.io/2020/08/21/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/","excerpt":"","text":"进程（process）和线程（thread）的区别： 资源：进程是资源分配的基本单位，线程不拥有资源，线程可以访问隶属进程的资源。 调度：线程是独立调度的基本单位，在同一进程中，线程的切换不会引起进程的切换，从一个进程中的线程 切换到 另一个进程中的线程，会引起进程切换。 系统开销：创建和撤销进程，系统都要为其分配或回收资源，如内存空间，I/O设备等，所付出的开销远大于穿那创建和撤销线程时的开销。类似的，在进行进程切换时，涉及当前执行进程CPU环境的保存及新调度进程CPU环境的设置，而线程切换时只需保存和设置少量寄存器的内容，开销很小。 切换页目录以及使用新的地址空间（进程） 切换内核栈（进程，线程） 切换硬件上下文（进程，线程） 通信方面：线程间的通信可以通过直接读写同一进程中数据进行通信，但是进程通信需要借助IPC。 安全：多线程是不安全的，当一个线程崩溃了，会导致整个进程也崩溃，即其他线程也挂了。而多进程不会，一个进程挂了，其他进程照样运行。 CPU密集型代码(各种循环处理、计算等等)：使用多进程。IO密集型代码(文件处理、网络爬虫等)：使用多线程。 进程间通信 IPC(Inter-Process Communication)： 管道：通过调用pipe函数创建，只支持半双工（单向交替传输），只能在父子进程中使用。 FIFO，也称为命名管道，去除了管道只能在父子进程中使用的限制。 消息队列：可以独立于读写进程存在，从而避免了FIFO中同步管道的打开和关闭时可能产生的困难。读进程可以根据消息类型有选择地接收消息。 信号量：一个计数器，用于为多个进程提供对共享数据对象的访问。 共享内存：允许多个进程共享一个给定的存储区，因为数据不需要在进程之间复制，所以这是最快的一种IPC。需要使用信号量来同步对共享存储的访问。多个进程可以将同一个文件映射到他们的地址空间从而实现共享内存。 Socket：可以用于不同机器间的IPC 线程间通信，主要目的是用于线程同步，没有像进程通信那样的数据交换机制： 锁机制 互斥锁：确保同一时间只能有一个线程访问共享资源。 读写锁：读模式共享，写模式互斥。 条件变量：以原子的方式阻塞进程，直到某个特定条件为真为止。对条件的测试是在互斥锁的保护下进行的。条件变量始终与互斥锁一起使用。 自旋锁：上锁受阻时线程不阻塞而是在循环中轮询查看能否获得该锁，没有线程的切换因而没有切换的开销，不过对CPU的霸占会导致CPU资源的浪费。所以自旋锁适用于并行结构（多个处理器）或者锁被持有时间短而不希望在线程切换产生开销的情况。 信号量机制： 信号量实际上是一个非负的整数计数器，用来实现对公共资源的控制。 在公共资源增加的时候，信号量就增加； 公共资源减少的时候，信号量就减少； 只有当信号量的值大于0的时候，才能访问信号量所代表的公共资源。 volatile全局变量 wait/notify","categories":[{"name":"笔记","slug":"笔记","permalink":"https://hugobbtt.github.io/categories/%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"有关TCP的常见问题","slug":"有关TCP的常见问题","date":"2020-08-20T07:47:06.000Z","updated":"2020-08-20T17:46:24.531Z","comments":true,"path":"2020/08/20/有关TCP的常见问题/","link":"","permalink":"https://hugobbtt.github.io/2020/08/20/%E6%9C%89%E5%85%B3TCP%E7%9A%84%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/","excerpt":"","text":"三次握手三次挥手的目的 建立可靠的通信信道，让双方都确定自己与对方的发送和接收是正常的。 防止失效的连接请求到达服务器，让服务器错误打开连接。 三次挥手的过程 第一次握手：服务端确认客户端的发送功能，自己的接收功能。SYN=1，初始序号SEQ=x 第二次握手：客户端确认自己的发送、接收功能，服务端的发送、接收功能。SYN=1，确认号ACK=x+1，同时也选择一个初始序号SEQ=y 第三次握手：服务端确认自己的发送功能，客户端的接收功能。确认号ACK=y+1，序号为SEQ=x+1 为什么要传回SYN：接收端传回发送端所发送的SYN是为了告诉发送端，我接受到的信息确实是你所发送的信号，而不是别人的。 四次挥手 客户端-发送连接释放报文FIN，用来关闭客户端到服务器的数据传送，FIN=1，初始序号SEQ=u 服务器-收到这个 FIN，它发回一个确认ACK，此时TCP处于半关闭状态（CLOSE-WAIT），B能向A发数据但A不能向B发数据。确认号ACK=u+1，同时也初始一个序号SEQ=v 当服务器不再需要发送数据时，发送释放连接报文FIN。FIN=1，ACK=u+1，序号SEQ=w 客户端-发回 ACK 报文确认，进入TIME-WAIT状态，等待2倍的MSL（最大报文存活时间 Maximum Segment Lifetime）后释放连接。确认号ACK=w+1，序号u+1 服务器收到ACK后释放连接。 为什么要有TIME-WAIT状态，而不是直接进入CLOSED状态： 确保最后一个确认报文ACK能够到达服务端，如果服务端没有收到客户端的ACK报文，最需要重新发送连接释放请求报文FIN，即重新来过。客户端等待的2倍MSL时间就是为了处理这种情况的发生。 等待时间是为了让本次连接持续时间内产生的所有报文都从网络中消失，使得下一次新的连接不会出现旧的连接请求报文SYN，从而错误打开连接。 TCP流量控制(Flow Control) 流量控制是为了控制发送方发送速率，保证接收方来得及接收。 TCP连接的每一方都有固定大小的缓冲空间，TCP的接收端只允许发送端发送接收端缓冲区能够接纳的数据。当接收方来不及处理发送方的数据，能提示发送方降低发送的速率，防止包丢失。 接收方发送的确认报文中的窗口字段可以用来控制发送方窗口的大小，从而影响发送方的发送速率。如果将窗口字段设置成0，则发送方不能发送数据。接收窗口只会对窗口内最后一个按序到达的字节进行确认，例如接收窗口已经收到的字节为 {31, 34, 35}，其中 {31} 按序到达，而 {34, 35} 就不是，因此只对字节 31 进行确认。发送方得到一个字节的确认之后，就知道这个字节之前的所有字节都已经被接收。 TCP拥塞控制(Congestion Control)慢启动（slow start）和拥塞避免（Congestion Avoidance）： 发动的最初执行慢开始，令拥塞窗口cwnd=1 (congestion window)**，发送方只能发送1个报文段；当收到ACK确认后，将cwnd加倍，因此之后发送方能够发送的报文段数量为2,4,8,…..由于指数增长的非常快，网络拥塞的可能性也就很高。设置一个慢开始门限ssthresh，当swnd&gt;=ssthresh时，进入拥塞避免，每个轮次只将cwnd加1。 如果出现了连接超时，则令ssthresh=cwnd/2，然后重新执行慢开始 cwnd=1。** 快重传和快恢复： 接收方每次接收到报文段都应该对最后一个已收到的有序报文段进行确认。发送方如果收到三个重复确认，那么就可以知道下一个报文段丢失，此时执行快重传，立即重传下一个报文段。通知执行快恢复，令ssthresh=cwnd/2，cwnd=ssthresh，此时直接进入拥塞避免。 慢开始和快恢复的快慢指的是cwnd的设定值，而不是cwnd的增长速率（刚好相反）。慢开始cwnd设定为1，增长率为指数增长，而快恢复cwnd设定为ssthresh，增长率为线性增长。 拥塞控制是一种自适应的机制，用来推断当前带宽的大小，以及网路的拥挤程度。 应用层也可以实现这种自适应机制，比如说看视频的时候，是从模糊到越来越清晰，若网络有故障就会减低清晰度。这种应用于视频流的机制被称为“自适应比特流”。","categories":[{"name":"笔记","slug":"笔记","permalink":"https://hugobbtt.github.io/categories/%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"第一篇博客","slug":"My-New-Post","date":"2020-08-14T16:02:35.000Z","updated":"2020-08-15T05:21:25.707Z","comments":true,"path":"2020/08/15/My-New-Post/","link":"","permalink":"https://hugobbtt.github.io/2020/08/15/My-New-Post/","excerpt":"","text":"标题有的人可能18岁就搭了自己的博客，而有的人在26岁的时候才搭上，不管怎样，只要开始就是好的吧。 打算就是在这个博客了记录一下遇到的技术问题，分享一些总结到的知识。主要是有利于自己巩固知识，因为只有输出了才是自己的，如果还能有幸帮助到别人也是很好的。 靡不有初鲜克有终。","categories":[],"tags":[]}],"categories":[{"name":"面试","slug":"面试","permalink":"https://hugobbtt.github.io/categories/%E9%9D%A2%E8%AF%95/"},{"name":"笔记","slug":"笔记","permalink":"https://hugobbtt.github.io/categories/%E7%AC%94%E8%AE%B0/"}],"tags":[]}